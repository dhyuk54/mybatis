<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.dao.IUserDao">
    <!--如果实体类的属性和数据库中的列名不一致的情况下会导致封装不全面-->
    <!--那么为了解决这一现象就要使用resultMap这个标签-->
    <!--id为唯一标识 type为查询实体类的全类限定名-->
    <resultMap id="userMap" type="com.mybatis.domain.User">
        <!--主键字段的对应-->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <!--property为实体类中的属性-->
        <!--column为数据库中的列名-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>

    </resultMap>
    
    <!--配置查询所有-->
    <!--resultType属性的值为要把数据库查询得到的数据要封装到什么位置-->
    <!--id属性值写为IUSerDao接口中的抽象方法名保持一致-->
    <!--select标签中的resultMap属性值对应为 id的属性值-->
    <select id="findAll" resultType="com.mybatis.domain.User">
        select * from user
    </select>
    <!--插入user信息并保存-->
    <!--parameterTypes属性值取决于用户输入的数据类型-->
    <!--属于user类型-->
    <!-- 配置插入操作后,获取插入数据的ID-->
    <!--keyProperty 对应实体类的属性 -->
    <!--keyColumn 对应数据库中的列名 -->
    <!--AFTER的值为 插入完成后执行操作 -->
    <insert id="saveUser" parameterType="com.mybatis.domain.User">
        /*把user类型的数据赋值给value*/
    <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
        select last_insert_id()
    </selectKey>
        insert into user(username,address,sex,birthday) value (#{username},#{address},#{sex},#{birthday})
    </insert>
    <!--更新用户-->
    <update id="updateUser" parameterType="com.mybatis.domain.User">
        <!--parameterType 已经封装了User对象所以在使用#{}获取值时{不需要写入对象名.XXX}-->
        <!-- 直接写属性名就可以获取值-->
        update user set username = #{username},address = #{address},sex = #{sex},birthday = #{birthday}
        where id = #{id}
    </update>
    <!--删除用户-->
    <delete id="deleteUser" parameterType="int">
    /*如果删除中的ID只有一个值占位符可以随意去写不用考虑user实体类中的属性是否一致*/
    delete from user where id = #{userId}
    </delete>
    <!--根据ID查询用户-->
    <!--resultType属性值为查询出来的结果集要封装到哪里去-->
    <select id="findById" parameterType="int" resultType="com.mybatis.domain.User">
        select * from user where id = #{uid}
    </select>

    <!--根据名称模糊查询-->
    <select id="findByName" parameterType="String" resultType="com.mybatis.domain.User">
    /*sql 语句中模糊查询语法为 % XX % */
        select * from user where username like #{name}
    </select>

    <!--获取用户的总记录条数-->
    <!--返回int类型的数据-->
    <select id="findTotal" resultType="int">
        select count(id) from user
    </select>
    <!-- 根据QueryVo的条件 查询用户-->
    <!--parameterType属性值为当前类-->
    <!--当前类中的属性没有username所以只能写QueryVo中user的对象-->
    <!--#{中调用user对象中的username属性}来查询-->
    <select id="findUserByvo" parameterType="com.mybatis.domain.QueryVo" resultType="com.mybatis.domain.User">
        select * from user where username like #{user.username}
    </select>
</mapper>